--------------------------------------------------------STUDENT DATABASE--------------------------------------------------
clear
while [ 1 ]
do
	echo -ne "1.Create 2.Display 3.Insert 4.Search 5.Modify 6.Delete 7.Exit\n"
	echo -e "Enter Choice=\c"
	read ch
	case $ch in 
		1)
			echo -n "Enter File name:"
			read fname
			if [ -e $fname ]
			then 
				echo "File already Exists"
			else
				>> $fname
				echo "File Created Successfully"
			fi
			;;
		2)
			echo -n "Enter File name:"
			read fname
			if [ -e $fname ]
			then 
				echo "the content of File:"
				sort -n $fname
			else 
				echo "File not exists"
			fi
			;;
		3)
			echo -n "Enter file Name:"
			read fname
			if [ -e $fname ]
			then 
				echo -n "Enter roll number:"
				read roll
				grep -w "$roll" $fname
				ans=$?
				if [ $ans -eq 0 ]
				then 
					echo "Record already Exists"
				else 
					echo -n "Enter Name:"
					read name
					echo $roll $name >> $fname
					echo "Record inserted Successfully"
				fi
			else
				echo "File not Exists"
			fi
			;;
		4)
			echo -n "Enter file name:"
			read fname
			if [ -e $fname ]
			then 
				echo -n "Enter Roll number:"
				read roll
				grep -w "$roll" $fname
				ans=$?
				if [ $ans -eq 0 ]
				then
				       	echo "Record Found"
				else
					echo "Record not found"
				fi
			else
				echo "File doesnot Exists"
			fi
			;;
		5)
			echo -n "Enter file name:"
			read fname
			if [ -e $fname ]
			then
				echo -n "Enter the roll Number:"
				read roll
				grep -w "$roll" $fname
				ans=$?
				if [ $ans -eq 0 ]
				then 
					echo -n "Enter newRoll and new name:"
				       	read nroll nname
			       		grep -w "$nroll" $fname
			 		ans=$?
					if [ $ans -eq 0 ] 
					then 
						echo "New roll number already exists"
					else 
						grep -v "$roll" $fname >> temp
						echo "$nroll $nname" >> temp
						rm $fname
						cp temp $fname
						rm temp
						echo "Record modified successfully"
					fi
				else
					"Record not present"	
				fi	
			else 
				echo "File doesnot Exists"
			fi
			;;
		6)
			echo -n "Enter file name:"
			read fname
			if [ -e $fname ] 
			then 
				echo -n "Enter roll number:"
				read roll
				grep -w "$roll" $fname
				ans=$?
				if [ $ans -eq 0 ] 
				then 
					grep -v "$roll" $fname >> temp
					rm $fname
					cp temp $fname
					rm temp
					echo "Record deleted Successfully"
				else
					echo "Roll number doestNot exists"
				fi
			else 
				echo "File not exists"
			fi
			;;
		7) exit

			;;
		*) echo "Your choice not correct"
			;;
	esac
done


----------------------------------------------------FORK SYSTEM CALL--------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <ctype.h>

void asc(int *,int );
void desc(int *, int );

int main(){
  int *arr,n;
  pid_t pid;
  printf("ENTER NUMBER OF ARRAY ELEMENTS:- ");
  scanf("%d",&n);
  arr=(int)malloc(n*sizeof(int));
  printf("ENTER ARRAY ELEMENTS:-");
  for(int i=0;i<n;i++){
    printf("\narr[%d]\n",i);
    scanf("%d",&arr[i]);
  }

  pid=fork();

  if(pid<0){
    perror("FORK ERROR!");
  }
  else if(pid==0){
    printf("\nCHILD PID =%ld",(long)getpid());
  }
  else{
    printf("\nPARENT PID =%ld",(long)getpid());
  }

  switch(pid){
    case -1:
    printf("FORK ERROR!");
    exit(-1);
    case 0:
    printf("\nCHILD EXECUTING...\n");
      asc(arr,n);
    exit(0);
    default:
      wait(NULL);
      printf("\nPARENT EXECUTING...\n");
      desc(arr,n);  
      system("ps -elf");
  }
}

void asc(int *arr,int n){
  int temp;
  for(int i=0;i<n;i++)
    for(int j=i+1;j<n;j++)
      if(arr[i] > arr[j]){
        temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
      }
  printf("ELEMENTS IN ASCENDING ORDER ARE:- ");
  for(int i=0;i<n;i++){
    printf("\t%d",arr[i]);
    printf("\t");
  }
 
}
void desc(int *arr,int n){
  int temp;
  for(int i=0;i<n;i++)
    for(int j=i+1;j<n;j++)
      if(arr[i] < arr[j]){
        temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
      }
  printf("ELEMENTS IN DESCENDING ORDER ARE:- ");
  for(int i=0;i<n;i++){
    printf("\t%d",arr[i]);
     printf("\t");
  }  
}


-----------------------------------------------------FCFS---------------------------------------------------
#include<stdio.h>
struct proc{
	int proc;
	int at;
	int st;
	int wt;
	int tat;
};

void sort(); // To sort processes in ascending order of arrival time
void calculation(); // To calclate turnaroud time and waiting time and avg

struct proc p[10];

int n, temp, a, b;

void main(){
	int i;
	printf("\n\nEnter total number of processes: ");
	scanf("%d",&n);
	printf("\nEnter process no, Arrival time and burst time\n");
	for(i=0; i<n; i++){
		printf("p");
		scanf("%d%d%d", &p[i].proc, &p[i].at, &p[i].st);
	}
	
	sort();
	calculation();
}

void sort(){
	int i,j;
	struct proc temp;

	for(i=0;i<n-1;i++){
		for(j=0;j<n-1;j++){
			if(p[j].at >= p[j+1].at){
				temp=p[j];
				p[j]=p[j+1];
				p[j+1]=temp;
			}
		}
	}

	printf("Processes in ascending order of Arrival Time\n");
	printf("Process\t AT\t BT\t\n");
	for(i=0;i<n;i++){
		printf("p%d\t %d\t %d",p[i].proc,p[i].at,p[i].st);
		printf("\n");
	}

}

void calculation(){
	int i,j;
	float atat,awt;
	float a=0;
	float b=0;
	p[0].tat=p[0].at+p[0].st;
	temp=p[0].tat;
	for(i=1;i<n;i++){
		if(p[i].at<=p[i-1].tat){
			p[i].tat=temp+p[i].st;
			temp=p[i].tat;
		}
		else{
			p[i].tat=p[i].at+p[i].st;
			temp=p[i].tat;
		}
	}
	for(i=0;i<n;i++){
		p[i].tat=p[i].tat-p[i].at;
		p[i].wt=p[i].tat-p[i].st;
		a=a+p[i].tat;
		b=b+p[i].wt;
	}
	printf("Process\t AT\t BT\t TAT\t WT\n");
	for(i=0;i<n;i++){
		printf("p%d\t %d\t %d\t %d\t %d", p[i].proc,p[i].at,p[i].st,p[i].tat,p[i].wt);
		printf("\n");
	}
	atat=a/n;
	awt=b/n;
	printf("Average Turnaroud time= %f Average waiting time= %f\n",atat,awt);
}


---------------------------------------------------------------------------PREEMPTIVE-------------------------------------------------------------------

#include <stdio.h>

int main()
{
    int i, limit, total = 0, x, counter = 0, time_quantum;
    int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
    float average_wait_time, average_turnaround_time;
    printf("\nEnter Total Number of Processes:\t");
    scanf("%d", &limit);
    x = limit;
    for (i = 0; i < limit; i++)
    {
        printf("\nEnter Details of Process[%d]\n", i + 1);

        printf("Arrival Time:\t");

        scanf("%d", &arrival_time[i]);

        printf("Burst Time:\t");

        scanf("%d", &burst_time[i]);

        temp[i] = burst_time[i];
    }

    printf("\nEnter Time Quantum:\t");
    scanf("%d", &time_quantum);
    printf("\nProcess ID\t\tBurst Time\t Turnaround Timet Waiting Time\n");
    for (total = 0, i = 0; x != 0;)
    {
        if (temp[i] <= time_quantum && temp[i] > 0)
        {
            total = total + temp[i];
            temp[i] = 0;
            counter = 1;
        }
        else if (temp[i] > 0)
        {
            temp[i] = temp[i] - time_quantum;
            total = total + time_quantum;
        }
        if (temp[i] == 0 && counter == 1)
        {
            x--;
            printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
            wait_time = wait_time + total - arrival_time[i] - burst_time[i];
            turnaround_time = turnaround_time + total - arrival_time[i];
            counter = 0;
        }
        if (i == limit - 1)
        {
            i = 0;
        }
        else if (arrival_time[i + 1] <= total)
        {
            i++;
        }
        else
        {
            i = 0;
        }
    }

    average_wait_time = wait_time * 1.0 / limit;
    average_turnaround_time = turnaround_time * 1.0 / limit;
    printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
    printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
    return 0;
}

-----------------------------------------------------FIFO------------------------------------------------------

#include <stdio.h>

int main()
{
    int n;
    printf("Enter the value of n: ");
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++) {
        printf("Enter %d: ",i+1);
        scanf("%d",&arr[i]);
    }
   
    int frame;
    printf("Enter frame size: ");
    scanf("%d",&frame);
   
    int index = 0;
    int frameStack[frame];
    int fcount[frame];   
    for(int i=0;i<frame;i++) {
        frameStack[i] = -1;
        fcount[i] = 0;
    }
      
    for(int i=0;i<n;i++) {
        printf("%d ",arr[i]);
    }
    printf("\n");
    
    int pageFaults = 0;
    for(int i=0;i<n;i++) {
        int num = arr[i];
        int flag = 0;
        for(int j=0;j<frame;j++) {
            if(frameStack[j] == num) {
                flag++;
                pageFaults--;
                break;
            }
        }
        pageFaults++;
        if((pageFaults<=frame) && flag==0){
            frameStack[i] = arr[i];
        }
        else if(flag==0){
            frameStack[(pageFaults-1)%frame] = arr[i];
        }
        for(int j=0;j<frame;j++) {
            if(frameStack[j] == -1) {
                printf("* ");
            }
            else {
                printf("%d ",frameStack[j]);
            }
        }
        printf("\n");
    }
    float tCount = pageFaults;
    float num = n;
    printf("Number of page fault: %d\n",pageFaults);
    float freq = (pageFaults/num)*100;
    printf("Page fault frequency is : %f",freq);
    return 0;
}


-----------------------------------------------------LRU--------------------------------------------------------

#include <stdio.h>

int main()
{
    int n;
    printf("Enter the value of n: ");
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++) {
        printf("Enter %d: ",i+1);
        scanf("%d",&arr[i]);
    }
   
    int frame;
    printf("Enter frame size: ");
    scanf("%d",&frame);
   
    int index = 0;
    int frameStack[frame];
    int fcount[frame];   
    for(int i=0;i<frame;i++) {
        frameStack[i] = -1;
        fcount[i] = 0;
    }
   
    int count = 0;
   
    for(int i=0;i<n;i++) {
        printf("%d ",arr[i]);
    }
    printf("\n");
   
    for(int i=0;i<n;i++) {
        int num = arr[i];
        int flag = 0;
        for(int j=0;j<frame;j++) {
            if(frameStack[j] == num) {
                flag = 1;
                break;
            }
        }
        for(int j=0;j<frame;j++) {
            fcount[j] = fcount[j] + 1;
        } 
        if(flag == 1) {
            for(int f=0;f<frame;f++) {
                if(frameStack[f] == num) {
                    fcount[f] = 0;
                }
            }
            for(int j=0;j<frame;j++) {
                if(frameStack[j] == -1) {
                    printf("* ");
                }
                else {
                    printf("%d ",frameStack[j]);
                }
            }
            printf("\n");
            continue;
        }
        else {
            count++;
            int max = -1,x;
            for(int p=0;p<frame;p++) {
                if(fcount[p] > max) {
                    max = fcount[p];
                    x = p;
                } 
            }
            frameStack[x] = num;
            fcount[x] = 0;
        }
       
        for(int j=0;j<frame;j++) {
            if(frameStack[j] == -1) {
                printf("* ");
            }
            else {
                printf("%d ",frameStack[j]);
            }
        }
        printf("\n");
    }
    float tCount = count;
    float num = n;
    printf("Number of page fault: %d\n",count);
    float freq = (tCount/num)*100;
    printf("Page fault frequency is : %f",freq);
    return 0;
}

--------------------------------------------------------PRODUCER CONSUMER---------------------------------------------

PRODUCER : 

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#define FIFO_NAME1 "comm_pipe1"
#define FIFO_NAME2 "comm_pipe2"

int main()
{
    char s1[300],s2[300];
    int num, fd1,fd2,byt;
    mknod(FIFO_NAME1, S_IFIFO | 0666, 0);
    mknod(FIFO_NAME2, S_IFIFO | 0666, 0);
    printf("WAITING FOR CONSUMER...\n");
    fd1 = open(FIFO_NAME1, O_WRONLY);
    fd2 = open(FIFO_NAME2, O_RDONLY);
    printf("CONSUMER FOUND! \n TYPE INPUT TEXT...\n");
    gets(s1);
    if((num = write(fd1,s1,strlen(s1))) == -1)
   	 perror("write");
    else
    {
        printf("SPEAK: WROTE %d BYTES TO FILE1\n",num);
        byt=read(fd2,s2,300);
        s2[byt]='\0';
        printf("%s\n",s2);
    }
    return 0;
}


CONSUMER : 

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#define FIFO_NAME1 "comm_pipe1"
#define FIFO_NAME2 "comm_pipe2"

int main()
{
    char s[300],vowel[20],send[50];
    int num,fd1,fd2,sig,k=0,i,wordcnt=1,charcnt=0,linecnt=0;
    FILE *fp;
    fp=fopen("fifo.txt","w");
    mknod(FIFO_NAME1, S_IFIFO | 0666, 0);
    mknod(FIFO_NAME2, S_IFIFO | 0666, 0);
    printf("WAITING FOR PRODUCER...");
    fd1=open(FIFO_NAME1, O_RDONLY);
    fd2=open(FIFO_NAME2, O_WRONLY);
    printf("PRODUCER FOUND!\n");

    if((num = read(fd1,s,300)) == -1)
	    perror("read");
    else{
	    s[num] = '\0';
	    printf("TICK: READ %d BYTES: \"%s\"\n",num, s);
	    k=0;
	    vowel[0]='\0';
	    wordcnt=1;
	    for(i=0;i<num;i++){
		    if((s[i]=='a' || s[i]=='i' || s[i]=='e' || s[i]=='o' || s[i]=='u'))
		    {
			    vowel[k]=s[i];
			    k++;
		    }
		    if(s[i]== ' ' && s[i+1]!= ' '){
			    wordcnt++;
		    }
		    if(s[i]== '.' &&(s[i+1]==' ' || s[i+1]=='\0')){
			    linecnt++;
		    }
			    else if(s[i]!='.' && s[i]!=' ')
				    charcnt++;
	    }
		    vowel[k]='\0';
		    sprintf(send,"FOR GIVEN INPUT \n WORD COUNT: %d \n VOWEL COUNT: %d \n CHARACTER COUNT: %d \n LINES: %d \n", wordcnt,k,charcnt,linecnt);
		    fprintf(fp, "%s", send);

		    if((sig=write(fd2,send,strlen(send)))!=-1)
			    printf("\n WRITTEN SUCCESSFULLY TO FILE 2!");
		    else
			    printf("\n ERROR IN WRITING FILE 2!");
	    }

	    return 0;
    }

--------------------------------------------------READER WRITER PROBLEM ----------------------------------------------

#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>

#define R 5
#define W 5
int readcount,writecount;
sem_t y,z;
pthread_mutex_t x;
sem_t wsem,rsem;
int s=5;

void *reader1(void *a);
void *writer1(void *a);
void *reader2(void *a);
void *writer2(void *a);

int main(){
	int i,op;
	pthread_t thread_read[R],thread_write[W];
	pthread_mutex_init(&x,NULL);
	sem_init(&wsem,0,1);
	sem_init(&y,0,1);
	sem_init(&rsem,0,1);
	sem_init(&z,0,1);
	
	do{
		printf("MENU:-\n 1.READER IS PRIORITY\n2.WRITER IS PRIORITY\n3.EXIT\n");
		scanf("%d",&op);

		switch(op){
			case 1: readcount=0;
				for(i=0;i<W;i++){
					pthread_create(&thread_write[i],NULL, *writer1,(void *)i);
				}
				for(i=0;i<R;i++){
					pthread_create(&thread_read[i],NULL, *reader1, (void *)i);
				}
				for(i=0;i<W;i++){
					pthread_join(thread_write[i],NULL);
				}
				for(i=0;i<R;i++){
					pthread_join(thread_read[i],NULL);
				}
				break;
			case 2: readcount=0;
				writecount=0;
				for(i=0;i<W;i++){
                                        pthread_create(&thread_write[i],NULL, *writer2,(void *)i);
                                }
                                for(i=0;i<R;i++){
                                        pthread_create(&thread_read[i],NULL, *reader2, (void *)i);
                                }
                                for(i=0;i<W;i++){
                                        pthread_join(thread_write[i],NULL);
                                }
                                for(i=0;i<R;i++){
                                        pthread_join(thread_read[i],NULL);
                                }
                                break;
			case 3:
				break;
		}
	}while(op!=3);
}
void *reader1(void *a){
	int r= (int)a;
	int i=0;
	while(i<5){
		pthread_mutex_lock(&x);
		readcount++;
		if(readcount == 1)
			sem_wait(&wsem);
		pthread_mutex_unlock(&x);
		printf("\t\tREADER %d IS READING:- %d \n",r,s);
		pthread_mutex_lock(&x);
		readcount--;
		if(readcount ==0)
			sem_post(&wsem);
		pthread_mutex_unlock(&x);
		sleep(rand() % 10);
		i++;
	}
}

void *writer1(void *a){
	int w= (int)a;
	int i=0;
	while(i<2){
		sem_wait(&wsem);
		s+=5;
		printf("WRITER %d IS WRITING: %d \n",w,s);
		sem_post(&wsem);
		sleep(rand() % 10);
		i++;
	}
}
void *reader2(void *a){

	int i=0;
	int r=(int)a;
	while(i<5){
		sem_wait(&z);
		sem_wait(&rsem);
		pthread_mutex_lock(&x);
		readcount++;
		if(readcount == 1)
			sem_wait(&wsem);
		pthread_mutex_unlock(&x);
		sem_post(&rsem);
		sem_post(&z);
		printf("\t\t READER %d IS READING:%d",r,s);
		pthread_mutex_lock(&x);
		readcount--;
		if(readcount == 0)
			sem_post(&wsem);
		pthread_mutex_unlock(&x);
		sleep(rand() % 10);
		i++;
	}
}

void *writer2(void *a){
	int i=0;
	int w=(int)a;
	while(i<2){
		sem_wait(&y);
		writecount++;
		if(writecount == 1)
			sem_wait(&rsem);
		sem_post(&y);
		sem_wait(&wsem);
		s+=10;
		printf("WRITER %d IS WRITING: %d",w,s);
		sem_post(&wsem);
		sem_wait(&y);
		writecount--;
		if(writecount==0)
			sem_post(&rsem);
		sem_post(&y);
		sleep(rand() % 10);
		i++;
	}
}
